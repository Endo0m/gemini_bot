from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import google.generativeai as genai

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Gemini
GOOGLE_API_KEY = 'AIzaSyDRsYWDqHrAljAXtuAu4bDbg3aS-G0uLcA'
genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel('gemini-1.5-flash')


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–æ—Ç–∞
def get_keyboard():
    keyboard = [
        [KeyboardButton("üöÄ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å Gemini")],
        [KeyboardButton("‚ùì –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø - —É–º–Ω—ã–π –±–æ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ Gemini.\n"
        "–î–∞–≤–∞–π –ø–æ–æ–±—â–∞–µ–º—Å—è –∏–ª–∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º! üòä",
        reply_markup=get_keyboard()
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_message = update.message.text

    if user_message == "üöÄ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å Gemini":
        await update.message.reply_text(
            "–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! –°–ø—Ä–∞—à–∏–≤–∞–π —á—Ç–æ —É–≥–æ–¥–Ω–æ üòä",
            reply_markup=get_keyboard()
        )
        return

    if user_message == "‚ùì –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?":
        await update.message.reply_text(
            "ü§ñ –Ø - –º–æ—â–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å Gemini!\n\n"
            "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —á–µ–º —É–≥–æ–¥–Ω–æ:\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            "‚Ä¢ –ü–æ–º–æ—á—å —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º\n"
            "‚Ä¢ –û–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã\n"
            "‚Ä¢ –ü–æ–º–æ—á—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n"
            "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —ç—Å—Å–µ\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å! üòä",
            reply_markup=get_keyboard()
        )
        return

    try:
        response = model.generate_content(
            f"–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}",
            generation_config=genai.types.GenerationConfig(
                temperature=0.7,
                max_output_tokens=800,
            )
        )
        await update.message.reply_text(
            response.text,
            reply_markup=get_keyboard()
        )
    except Exception as e:
        print(f"Error in handle_message: {str(e)}")
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            reply_markup=get_keyboard()
        )


def main() -> None:
    # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    token = "7818121330:AAFxve8Yg29gsFdRnCb7sK96EvfeBm9FEDQ"

    application = ApplicationBuilder().token(token).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("Bot started!")
    application.run_polling()


if __name__ == "__main__":
    main()
