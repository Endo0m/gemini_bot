from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import google.generativeai as genai
from collections import defaultdict

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Gemini
GOOGLE_API_KEY = 'AIzaSyDRsYWDqHrAljAXtuAu4bDbg3aS-G0uLcA'
genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel('gemini-1.5-flash')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
conversation_history = defaultdict(list)
MAX_HISTORY_LENGTH = 30  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
MAX_TOKENS_ESTIMATE = 4096  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –º–æ–¥–µ–ª–∏


def estimate_tokens(text: str) -> int:
    """–ì—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ"""
    # –í —Å—Ä–µ–¥–Ω–µ–º, –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω ~ 4 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    return len(text) // 4


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–æ—Ç–∞
def get_keyboard():
    keyboard = [
        [KeyboardButton("üöÄ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å Gemini")],
        [KeyboardButton("‚ùì –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?")],
        [KeyboardButton("üîÑ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    conversation_history[user_id] = []  # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø - —É–º–Ω—ã–π –±–æ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ Gemini.\n"
        "–î–∞–≤–∞–π –ø–æ–æ–±—â–∞–µ–º—Å—è –∏–ª–∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º! üòä\n"
        "–¢–µ–ø–µ—Ä—å —è –ø–æ–º–Ω—é –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –º–æ–≥—É –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω—É—é –±–µ—Å–µ–¥—É.",
        reply_markup=get_keyboard()
    )


async def clear_history(user_id: int, update: Update) -> None:
    conversation_history[user_id] = []
    await update.message.reply_text(
        "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞! –ù–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞ üòä",
        reply_markup=get_keyboard()
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    user_message = update.message.text

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–ª–∏–Ω–µ –∏—Å—Ç–æ—Ä–∏–∏
    history_length = len(conversation_history[user_id]) // 2  # –î–µ–ª–∏–º –Ω–∞ 2, —Ç–∞–∫ –∫–∞–∫ —Ö—Ä–∞–Ω–∏–º –∏ –≤–æ–ø—Ä–æ—Å—ã, –∏ –æ—Ç–≤–µ—Ç—ã
    if history_length > 0:
        context.user_data['history_length'] = history_length

    if user_message == "üöÄ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å Gemini":
        await update.message.reply_text(
            "–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! –°–ø—Ä–∞—à–∏–≤–∞–π —á—Ç–æ —É–≥–æ–¥–Ω–æ üòä",
            reply_markup=get_keyboard()
        )
        return

    if user_message == "‚ùì –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?":
        await update.message.reply_text(
            "ü§ñ –Ø - –º–æ—â–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å Gemini!\n\n"
            "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —á–µ–º —É–≥–æ–¥–Ω–æ:\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            "‚Ä¢ –ü–æ–º–æ—á—å —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º\n"
            "‚Ä¢ –û–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã\n"
            "‚Ä¢ –ü–æ–º–æ—á—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n"
            "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —ç—Å—Å–µ\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω—É—é –±–µ—Å–µ–¥—É\n"
            f"‚Ä¢ –ü–æ–º–Ω–∏—Ç—å –¥–æ {MAX_HISTORY_LENGTH} –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å! üòä",
            reply_markup=get_keyboard()
        )
        return

    if user_message == "üîÑ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é":
        await clear_history(user_id, update)
        return

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        conversation_history[user_id].append(f"User: {user_message}")

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏
        if len(conversation_history[user_id]) > MAX_HISTORY_LENGTH * 2:  # *2 –ø–æ—Ç–æ–º—É —á—Ç–æ —Ö—Ä–∞–Ω–∏–º –∏ –≤–æ–ø—Ä–æ—Å—ã, –∏ –æ—Ç–≤–µ—Ç—ã
            conversation_history[user_id] = conversation_history[user_id][-MAX_HISTORY_LENGTH * 2:]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
        history = conversation_history[user_id]
        conversation_context = ""
        total_tokens = 0

        # –ò–¥–µ–º –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫ –ø–µ—Ä–≤—ã–º
        for message in reversed(history):
            tokens = estimate_tokens(message)
            if total_tokens + tokens > MAX_TOKENS_ESTIMATE:
                break
            conversation_context = message + "\n" + conversation_context
            total_tokens += tokens

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        prompt = (
            "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. "
            "–í–æ—Ç –∏—Å—Ç–æ—Ä–∏—è –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n"
            f"{conversation_context}\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä, –æ—Ç–≤–µ—á–∞—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )

        response = model.generate_content(
            prompt,
            generation_config=genai.types.GenerationConfig(
                temperature=0.7,
                max_output_tokens=800,
            )
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        conversation_history[user_id].append(f"Assistant: {response.text}")

        await update.message.reply_text(
            response.text,
            reply_markup=get_keyboard()
        )

    except Exception as e:
        print(f"Error in handle_message: {str(e)}")
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            reply_markup=get_keyboard()
        )


def main() -> None:
    # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    token = "7818121330:AAFxve8Yg29gsFdRnCb7sK96EvfeBm9FEDQ"

    application = ApplicationBuilder().token(token).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("Bot started!")
    application.run_polling()


if __name__ == "__main__":
    main()
